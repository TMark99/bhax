<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
			<programlisting language="c"><![CDATA[
			#include <stdio.h>

			int main(){
			int n;
			printf("Adjon meg egy decimalis szamot: ");
			scanf("%d", &n);
			for(int i=1;i<=n;i++)
			{
				printf("I");
				if(i%5==0)
				printf(" ");
			}
			return 0;
			}
			]]></programlisting>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: 
            A program beolvas egy decimális számot és ezt úgy alakítja át unárisba, hogy annyi I-t fog kiírni, 
            amennyi a szám decimális értéke(tehát a for annyiszor fut le, ahányszor ki kell írjon egy I-t). 
            A könnyebb olvashatóság érdekében, ötösével tördeltem.
            Itt az ábra, ahogy a program működik:
			<inlinemediaobject>
			<imageobject>
                            <imagedata fileref="turing.png"/>
			</imageobject>
                        <textobject>
                            <phrase>Turing</phrase>
                        </textobject>
			</inlinemediaobject>
	</para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
		
        <para>
		<programlisting language="c"><![CDATA[
            Megoldás forrása 
				S, X, Y változók 
				a, b, c konstansok  
				S->abc, S->aXbc, Xb->bX, Xc->Ybcc, bY->Yb, aY->aax, aY->aa  
				S (S->aXbc)  
				aXbc (Xb->bX) 
				abXc (Xc->Ybcc) 
				abYbcc (bY->Yb) 
				aYbbcc(aY->aa) 
				aabbcc 
				<hr>
				A, B, C változó 
				a, b, c konstansok  
				A->aAb, A->aC, CB->bCc, cB->Bc, C->bc 
				A (A->aAB)  
				aAB (A->aC) 
				aaCB (CB->bCc) 
				aabCc(C->bc) 
				aabbcc
				]]></programlisting>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: 
			A generatív nyelvtan azoknak a szabályoknak a halmaza amelyek leírják, hogyan lehet előállítani egy átírási eljárással a kitüntetett kezdő szimbólumból a többi jelsorozatot a szabályokat egymás után alkalmazásával.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:
				A:
        </para>
		<programlisting>
		<![CDATA[
			#include <stdio.h>
			
			int a;
			for(a=0;a<5;a++)
			//5-ször fog lefutni
			 printf("1");
			 return 0;
		]]></programlisting>
		<para>2
		</para>
		<programlisting>
		<![CDATA[
			#include <stdio.h>
			
			int a;
			for(a=0;a<5;a++)
			/*5-ször fog lefutni*/
			 printf("1");
			 return 0;
		]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Az első kód, ahol a megjegyzés írásához "//"-t használtam nem fog lefutni a C89-es szabványával, csak a 99-essel.Mivel akkor még csak /**/-val lehetett kommentárt írni. A második kód viszont lefordul mindkét szabvánnyal.
         Aritmetikai és vezérlő utasítások függvényen belül, blokkban helyezkednek el. A tevékenység pontos megfogalmazása amit nem lehet részletezni, pontos jelentéssel bír.
		</para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:
			<programlisting language="c"><![CDATA[
			%{
			#include <stdio.h>
			#include <string.h>
			int szam = 0;
			%}
			%%

			[0-9]+		++szam;
			[a-zA-Z][a-zA-Z0-9]*	;                          
			%%
			
			main()
			{
			yylex();
			printf("%d szam van\n", szam);
			return 0;
			}
			]]></programlisting>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A lex egy lexikális elemző, a %% jelek között megadjuk a szabályt, ami szerint dolgozni, fog. Jelen esetben csak annyit csinál, hogy ha számot talál, az általunk deklarált változót növeli eggyel annyiszor, ahányszor számot talál az inputon.
        </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:
			<programlisting language="c"><![CDATA[
			%{
#include <stdio.h>
%}
%%
[A-Za-z]+ {
char szoveg[strlen(yytext)];
strcpy(szoveg, yytext);int i;
for(i=0;i<strlen(yytext);i++)
{
if(szoveg[i]=='a'||szoveg[i]=='A')printf("4");
else if(szoveg[i]=='i'||szoveg[i]=='I'||szoveg[i]=='l'||szoveg[i]=='L')printf("1");
else if(szoveg[i]=='e'||szoveg[i]=='E')printf("3");
else if(szoveg[i]=='b'||szoveg[i]=='B')printf("8");
else if(szoveg[i]=='g'||szoveg[i]=='G')printf("9");
else if(szoveg[i]=='o'||szoveg[i]=='O')printf("0");
else if(szoveg[i]=='r'||szoveg[i]=='R'||szoveg[i]=='z'||szoveg[i]=='Z')printf("2");
else if(szoveg[i]=='s'||szoveg[i]=='S')printf("5");
else if(szoveg[i]=='t'||szoveg[i]=='T')printf("7");
else printf("%c",szoveg[i]);
};
}
%%
int main()
{
yylex();
return 0;
}
			]]></programlisting>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: A program a lexer segítségével vizsgálja a szöveget és a beolvasott karaktersorban a karaktereket kicseréli az általunk megadott megfelelő karakterre, amit az if-ek sorozatával adunk meg.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
			<para>
			Ha a SIGINT jel kezelését végrehajtjuk, akkor a jel kezelését a 'jelkezelo' végezze.
			</para>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            <para>
			Ötször lefútt a for ciklus.
			</para>
			</listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>   
			<para>
			Ötször lefútt a for ciklus, mint az előzőnél.
			</para>
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>   
			<para>
			Ötször lefútt a for ciklus, a vektor elemeinek 0-tól 4-ig veszik fel az értékeiket.
			</para>
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>
			<para>
			Egy for ciklus ami addig fut le amíg eléri n-t és d indexértékét s indexértékéhez hasonlítja.
			</para>
            </listitem>
            <listitem>                                    
			
                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>
			<para>
            Egy kiíratás, ami az értékeket két függvényből várja.
            </para> 
            </listitem>
            <listitem>			

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>  
			<para>
            Egy kiíratás, ami kiír egy értékeket egy függvényből és egy változót.
            </para> 
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>
			<para>
            Egy kiíratás, ami kiír egy értékeket egy függvényből és egy változót, a függvény most az a memóriacímével fog dolgozni.
            </para> 				
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat: Figyeljünk az operátorok használatára és az értékváltoztatások sorrendjére.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat: 1 Minden x-re létezik egy nála nagyobb y ami prím.
			2. Minden x létezik egy annál nagyobb ikerprímszám.
			3. Van olyan y aminél minden x prím kisebb.
			4. Van olyan y aminél bármely nagyobb szám nem prímszám.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>  
				<programlisting><![CDATA[int a;]]></programlisting> 
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>   
				<programlisting><![CDATA[int *b;]]></programlisting> 
            </listitem>
            <listitem>
                <para>egész referenciája</para>    
				<programlisting><![CDATA[int &r;]]></programlisting>
            </listitem>
            <listitem>
                <para>egészek tömbje</para> 
				<programlisting><![CDATA[int t[5];]]></programlisting>
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para> 
				<programlisting><![CDATA[int (&tr)[5] = t;]]></programlisting>
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>    
				<programlisting><![CDATA[int *d[5];]]></programlisting>
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para> 
				<programlisting><![CDATA[int *h();]]></programlisting> 
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para> 
				<programlisting><![CDATA[int *(*h) ();]]></programlisting>
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>
				<programlisting><![CDATA[int (*v (int c)) (int a, int b);]]></programlisting>
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>
				<programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting> 
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting> 
			<para>
			Egy egész típusú változót.
			</para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>
				<para>
				Egy egész típusú mutatót ami a-ra mutat.
				</para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>    
				<para>
				a változónak a referenciája.
				</para> 
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>
				<para>
				Egy 5 elemű egész típusú tömböt.
				</para> 
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>   
				<para>
				Egészek tömbjének referenciáját.
				</para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>
				<para>
				5 elemű int-re mutató mutatók tömbjét.
				</para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>
				<para>
				Egy függvényt ami int-re mutató mutatót ad vissza.
				</para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>
				<para>
				Egy int-re mutató mutatót visszaadó függvényre mutató mutatót.(pl. az előző függvényre)
				</para>	
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>
				<para>
				int-et visszaadó, két intet kapó függvényre mutató mutatót visszaadó egészet kapó függvényt.
				</para>
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
				<para>
				int-et visszaadó, két intet kapó függvényre mutató mutatót visszaadó egészet kapó függvényre mutató mutatót.
				</para>
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                     


</chapter>                
